(()=>{"use strict";class e{constructor(){this.apiKey=null,this.knowledgeBase=null,this.secureStorage=null,"undefined"!=typeof SecureStorage&&(this.secureStorage=new SecureStorage)}static getInstance(){return e.instance||(e.instance=new e),e.instance}async loadKnowledgeBase(){if(this.knowledgeBase)return this.knowledgeBase;try{const e="undefined"!=typeof chrome&&chrome.runtime?chrome.runtime.getURL("data/knowledge-base.json"):"/data/knowledge-base.json",t=await fetch(e);return this.knowledgeBase=await t.json(),this.knowledgeBase}catch(e){return console.error("Failed to load knowledge base:",e),null}}generateSystemPrompt(e){return'You MUST respond ONLY with valid JSON. No other text.\n\n{\n  "prompt": "flowing, narrative Veo 3 video prompt",\n  "core_elements": {\n    "subject": "who/what",\n    "context": "where", \n    "action": "what happens",\n    "style": "visual mood"\n  },\n  "optional_elements": {\n    "camera": "movement",\n    "dialogue": "speech",\n    "sounds": "audio"\n  }\n}\n\nWrite cinematic, flowing prompts that adapt to different contexts (ads, interviews, home videos, sketches, etc.). Be flexible and logical - don\'t copy inappropriate details from one context to another. CRITICAL: Follow user instructions exactly - implement every requested change. JSON format only.'}async setApiKey(e){if(!e)return this.secureStorage?await this.secureStorage.removeApiKey():await chrome.storage.local.remove(["gptApiKey"]),void(this.apiKey=null);try{this.secureStorage?(await this.secureStorage.storeApiKey(e),this.apiKey=e):(this.apiKey=e,await chrome.storage.local.set({gptApiKey:e}))}catch(e){throw console.error("Failed to store API key:",e),e}}async getApiKey(){if(this.apiKey)return this.apiKey;try{if(this.secureStorage)return await this.secureStorage.migrateOldKey(),this.apiKey=await this.secureStorage.getApiKey(),this.apiKey;{const e=await chrome.storage.local.get(["gptApiKey"]);return this.apiKey=e.gptApiKey||null,this.apiKey}}catch(e){return console.error("Failed to retrieve API key:",e),this.apiKey=null,null}}async modifyPrompt(e){if(!e.instruction?.trim())throw new Error("📝 Modification instruction required: Please describe how you want to modify the prompt.");const t=await this.loadKnowledgeBase(),r=this.generateSystemPrompt(t);try{let t=await fetch("https://veoprompter.netlify.app/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:r,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})});if(!t.ok)try{t=await fetch("http://localhost:8888/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:r,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})})}catch(e){}if(!t.ok){const e=await t.json().catch(()=>({})),r=e.error?.message||e.message;if(console.error("GPT API Response Error:",{status:t.status,statusText:t.statusText,errorData:e,url:t.url}),401===t.status)throw new Error("🔐 Unauthorized: Backend API key invalid or missing.");if(403===t.status)throw new Error("🚫 Access denied by backend.");if(429===t.status)throw new Error("⏰ Rate limit exceeded. Please try again later.");if(t.status>=500)throw new Error("🔧 Server error: Please try again shortly.");if(400===t.status)throw new Error(`📝 Bad request: ${r||"Invalid prompt or instruction format."}`);if(404===t.status)throw new Error("🔧 Service unavailable: The AI modification service is not currently deployed. Please contact support.");throw new Error(`❌ Request failed (${t.status}): ${r||t.statusText||"Please try again."}`)}const a=await t.json();if(!a?.content)throw new Error("📭 Empty response: The AI didn't generate a response. Please try again with a different instruction.");try{const e=JSON.parse(a.content);if(e.prompt)return String(e.prompt).trim()}catch(e){}return String(a.content).trim()}catch(e){if(console.error("GPT API error:",e),e instanceof TypeError&&e.message.includes("fetch"))throw new Error("🌐 Connection failed: Please check your internet connection and try again.");throw e}}}const t="undefined"!=typeof ExtPay?ExtPay("veo-3-prompter"):null;chrome.action.onClicked.addListener(async e=>{e.id&&await chrome.sidePanel.open({tabId:e.id})}),chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.set({userLibrary:{savedPrompts:[],customTags:{},lastUpdated:(new Date).toISOString()}}),t&&(t.startBackground(),t.onPaid.addListener(e=>{console.log("User paid via ExtPay:",e),chrome.runtime.sendMessage({type:"PAYMENT_STATUS_CHANGED",user:e})})),console.log("Extension installed and ExtPay background service started")}),chrome.runtime.onMessage.addListener((r,a,o)=>"GET_USER_LIBRARY"===r.type?(chrome.storage.local.get(["userLibrary"],e=>{o(e.userLibrary)}),!0):"GET_PAYMENT_STATUS"===r.type?(t?t.getUser().then(e=>{o({paid:e.paid||!1,paidAt:e.paidAt?new Date(e.paidAt):void 0,installedAt:new Date(e.installedAt),trialStartedAt:e.trialStartedAt?new Date(e.trialStartedAt):void 0,email:e.email,subscriptionStatus:e.subscriptionStatus})}).catch(e=>{console.error("Error getting payment status:",e),o({paid:!1,installedAt:new Date})}):o({paid:!1,installedAt:new Date}),!0):"UPDATE_USER_LIBRARY"===r.type?(chrome.storage.local.set({userLibrary:r.data},()=>{o({success:!0})}),!0):"IMPROVE_PROMPT"===r.type?((async()=>{try{const t=e.getInstance(),a=await t.modifyPrompt({prompt:r.prompt,instruction:"Improve this prompt by enhancing its cinematic flow and narrative quality. Add vivid details that create atmosphere and smooth action transitions. Maintain the original concept while making it more evocative and story-driven for Veo 3."});o({success:!0,improvedPrompt:a})}catch(e){o({success:!1,error:e instanceof Error?e.message:"Failed to improve prompt"})}})(),!0):"CHANGE_PROMPT"===r.type&&((async()=>{try{const t=e.getInstance(),a=await t.modifyPrompt({prompt:r.prompt,instruction:`CHANGE REQUEST: "${r.instructions}". Adapt the core concept to this new context. Don't copy inappropriate details - understand the essence and recreate it appropriately. Make the change realistic and logical for the new subject matter.`});o({success:!0,changedPrompt:a})}catch(e){o({success:!1,error:e instanceof Error?e.message:"Failed to change prompt"})}})(),!0))})();