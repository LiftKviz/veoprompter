(()=>{"use strict";var e,t,r={},i={};function n(e){var t=i[e];if(void 0!==t)return t.exports;var a=i[e]={exports:{}};return r[e].call(a.exports,a,a.exports,n),a.exports}n.m=r,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce((t,r)=>(n.f[r](e,t),t),[])),n.u=e=>"vendor.js",n.miniCssF=e=>{},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="veo-3-prompt-assistant:",n.l=(r,i,a,o)=>{if(e[r])e[r].push(i);else{var s,c;if(void 0!==a)for(var l=document.getElementsByTagName("script"),p=0;p<l.length;p++){var d=l[p];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+a){s=d;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,n.nc&&s.setAttribute("nonce",n.nc),s.setAttribute("data-webpack",t+a),s.src=r),e[r]=[i];var u=(t,i)=>{s.onerror=s.onload=null,clearTimeout(m);var n=e[r];if(delete e[r],s.parentNode&&s.parentNode.removeChild(s),n&&n.forEach(e=>e(i)),t)return t(i)},m=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),c&&document.head.appendChild(s)}},n.j=471,(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e={471:0};n.f.j=(t,r)=>{var i=n.o(e,t)?e[t]:void 0;if(0!==i)if(i)r.push(i[2]);else{var a=new Promise((r,n)=>i=e[t]=[r,n]);r.push(i[2]=a);var o=n.p+n.u(t),s=new Error;n.l(o,r=>{if(n.o(e,t)&&(0!==(i=e[t])&&(e[t]=void 0),i)){var a=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;s.message="Loading chunk "+t+" failed.\n("+a+": "+o+")",s.name="ChunkLoadError",s.type=a,s.request=o,i[1](s)}},"chunk-"+t,t)}};var t=(t,r)=>{var i,a,[o,s,c]=r,l=0;if(o.some(t=>0!==e[t])){for(i in s)n.o(s,i)&&(n.m[i]=s[i]);c&&c(n)}for(t&&t(r);l<o.length;l++)a=o[l],n.o(e,a)&&e[a]&&e[a][0](),e[a]=0},r=self.webpackChunkveo_3_prompt_assistant=self.webpackChunkveo_3_prompt_assistant||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();const a=new class{constructor(){this.initialized=!1,this.EXTENSION_ID="veo-3-prompter",this.init()}async init(){try{const{default:e}=await n.e(121).then(n.bind(n,32));this.extpay=e(this.EXTENSION_ID),this.isBackgroundScript()&&this.extpay.startBackground(),this.initialized=!0,console.log("PaymentService initialized successfully")}catch(e){console.error("Failed to initialize PaymentService:",e)}}isBackgroundScript(){return"undefined"!=typeof chrome&&chrome.runtime&&"function"==typeof chrome.runtime.getManifest&&!chrome.tabs}async ensureInitialized(){if(this.initialized||await this.init(),!this.extpay)throw new Error("PaymentService not properly initialized")}async getUser(){await this.ensureInitialized();try{const e=await this.extpay.getUser();return{paid:e.paid||!1,paidAt:e.paidAt?new Date(e.paidAt):void 0,installedAt:new Date(e.installedAt),trialStartedAt:e.trialStartedAt?new Date(e.trialStartedAt):void 0,email:e.email,subscriptionStatus:e.subscriptionStatus}}catch(e){return console.error("Error getting user payment status:",e),{paid:!1,installedAt:new Date}}}async isPremiumUser(){const e=await this.getUser();return e.paid&&"active"===e.subscriptionStatus}async openPaymentPage(){await this.ensureInitialized();try{this.extpay.openPaymentPage()}catch(e){throw console.error("Error opening payment page:",e),new Error("Unable to open payment page")}}async getPlans(){await this.ensureInitialized();try{return(await this.extpay.getPlans()).map(e=>({id:e.id,title:e.title,description:e.description,price:e.price,currency:e.currency,interval:e.interval}))}catch(e){return console.error("Error getting payment plans:",e),[]}}onPaid(e){this.extpay?this.extpay.onPaid.addListener(t=>{const r={paid:t.paid||!1,paidAt:t.paidAt?new Date(t.paidAt):void 0,installedAt:new Date(t.installedAt),trialStartedAt:t.trialStartedAt?new Date(t.trialStartedAt):void 0,email:t.email,subscriptionStatus:t.subscriptionStatus};e(r)}):console.warn("ExtPay not initialized, payment listener not added")}async canUseFeature(e){const t=await this.isPremiumUser();return{gpt_modification:t,unlimited_saves:t,advanced_search:!0,custom_categories:t}[e]||!1}async getUsageLimits(){return await this.isPremiumUser()?{gptModifications:-1,savedPrompts:-1}:{gptModifications:3,savedPrompts:10}}async trackUsage(e){if(await this.isPremiumUser())return!0;const t=`usage_${e}_${(new Date).toDateString()}`;try{const r=(await chrome.storage.local.get([t]))[t]||0,i=await this.getUsageLimits();let n;return n="gpt_modification"===e?i.gptModifications:i.savedPrompts,!(r>=n)&&(await chrome.storage.local.set({[t]:r+1}),!0)}catch(e){return console.error("Error tracking usage:",e),!1}}async getRemainingUsage(e){if(await this.isPremiumUser())return-1;const t=`usage_${e}_${(new Date).toDateString()}`;try{const r=(await chrome.storage.local.get([t]))[t]||0,i=await this.getUsageLimits();let n;return n="gpt_modification"===e?i.gptModifications:i.savedPrompts,Math.max(0,n-r)}catch(e){return console.error("Error getting remaining usage:",e),0}}};class o{constructor(){this.apiKey=null,this.knowledgeBase=null,this.secureStorage=null,"undefined"!=typeof SecureStorage&&(this.secureStorage=new SecureStorage)}static getInstance(){return o.instance||(o.instance=new o),o.instance}async loadKnowledgeBase(){if(this.knowledgeBase)return this.knowledgeBase;try{const e="undefined"!=typeof chrome&&chrome.runtime?chrome.runtime.getURL("data/knowledge-base.json"):"/data/knowledge-base.json",t=await fetch(e);return this.knowledgeBase=await t.json(),this.knowledgeBase}catch(e){return console.error("Failed to load knowledge base:",e),null}}generateSystemPrompt(e){return'You are an expert Veo 3 video prompt generator. Your task is to create detailed, effective prompts for Google\'s Veo 3 video generation model based on user descriptions or ideas.\n\nIMPORTANT: Always output your response as valid JSON with the following structure:\n{\n  "prompt": "the complete Veo 3 prompt",\n  "visual_elements": {\n    "subject": "description of who/what is in the scene",\n    "context": "where the scene takes place",\n    "action": "what is happening",\n    "style": "visual aesthetic (e.g., cinematic, animated, stop-motion)",\n    "camera_motion": "how the camera moves",\n    "composition": "how the shot is framed",\n    "ambiance": "mood and lighting"\n  },\n  "audio_elements": {\n    "dialogue": "what characters say (if any)",\n    "ambient_sound": "background noise",\n    "sound_effects": "specific sounds",\n    "music": "musical elements (if any)"\n  },\n  "technical_notes": {\n    "subtitles": "whether to include \'(no subtitles)\' directive",\n    "pronunciation_hints": "phonetic spellings if needed",\n    "character_consistency": "detailed character descriptions for consistency"\n  }\n}\n\nPROMPT CONSTRUCTION GUIDELINES:\n1. VISUAL ELEMENTS - Include all relevant details:\n   - Subject: Be specific about appearance, clothing, age, expressions\n   - Context: Describe the location in detail (indoor/outdoor, specific place)\n   - Action: Clear description of movement and behavior\n   - Style: Choose appropriate visual style (default is professional live-action)\n   - Camera motion: Use cinematography terms (dolly, zoom, pan, tracking, aerial, eye-level, etc.)\n   - Composition: Specify framing (wide shot, close-up, medium shot)\n   - Ambiance: Describe lighting, mood, color tones\n\n2. AUDIO ELEMENTS - Be explicit about all sounds:\n   - Dialogue: Use format "Character says: [exact words]" or describe what they talk about\n   - Keep dialogue under 8 seconds worth of speech\n   - Ambient sound: Specify background noise appropriate to the scene\n   - Sound effects: List any specific sounds needed\n   - Music: Describe genre, mood, and style if music is needed\n\n3. SPECIAL CONSIDERATIONS:\n   - For dialogue, use colon format: "Person says: words" (not quotes)\n   - Add "(no subtitles)" to prevent unwanted text overlays\n   - Use phonetic spelling for proper names or unusual pronunciations\n   - For selfie-style videos, start with "A selfie video of..." and mention visible arm\n   - For character consistency across scenes, repeat exact character descriptions\n   - Specify who speaks in multi-character scenes to avoid confusion\n\n4. PROMPT LENGTH:\n   - Create detailed prompts (100-200 words typically)\n   - More detail = better control over output\n   - Include negative instructions when needed (e.g., "no subtitles", "no laugh track")\n\n5. STYLE VARIATIONS:\n   - Default: Professional live-action video\n   - Available styles: animated, stop-motion, claymation, hand-drawn, watercolor, cinematic, documentary, found footage, etc.\n   - Style affects both visuals and character movement\n\nRemember:\n- Veo 3 produces consistent outputs for identical prompts\n- Change prompts significantly for variety\n- Be specific about what you want to avoid hallucinations\n- Layer multiple elements for rich, compelling videos'}async setApiKey(e){if(!e)return this.secureStorage?await this.secureStorage.removeApiKey():await chrome.storage.local.remove(["gptApiKey"]),void(this.apiKey=null);try{this.secureStorage?(await this.secureStorage.storeApiKey(e),this.apiKey=e):(this.apiKey=e,await chrome.storage.local.set({gptApiKey:e}))}catch(e){throw console.error("Failed to store API key:",e),e}}async getApiKey(){if(this.apiKey)return this.apiKey;try{if(this.secureStorage)return await this.secureStorage.migrateOldKey(),this.apiKey=await this.secureStorage.getApiKey(),this.apiKey;{const e=await chrome.storage.local.get(["gptApiKey"]);return this.apiKey=e.gptApiKey||null,this.apiKey}}catch(e){return console.error("Failed to retrieve API key:",e),this.apiKey=null,null}}async modifyPrompt(e){if(!e.instruction?.trim())throw new Error("📝 Modification instruction required: Please describe how you want to modify the prompt.");const t=await this.loadKnowledgeBase(),r=this.generateSystemPrompt(t);try{let t=await fetch("https://veo-prompt-assistant.netlify.app/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:r,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})});if(!t.ok)try{t=await fetch("http://localhost:8888/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:r,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})})}catch(e){}if(!t.ok){const e=await t.json().catch(()=>({})),r=e.error?.message;if(401===t.status)throw new Error("🔐 Unauthorized: Backend API key invalid or missing.");if(403===t.status)throw new Error("🚫 Access denied by backend.");if(429===t.status)throw new Error("⏰ Rate limit exceeded. Please try again later.");if(t.status>=500)throw new Error("🔧 Server error: Please try again shortly.");throw new Error(`❌ Request error: ${r||"Please try again."}`)}const i=await t.json();if(!i?.content)throw new Error("📭 Empty response: The AI didn't generate a response. Please try again with a different instruction.");try{const e=JSON.parse(i.content);if(e.prompt)return String(e.prompt).trim()}catch(e){}return String(i.content).trim()}catch(e){if(console.error("GPT API error:",e),e instanceof TypeError&&e.message.includes("fetch"))throw new Error("🌐 Connection failed: Please check your internet connection and try again.");throw e}}}const s="undefined"!=typeof ExtPay?ExtPay("veo-3-prompter"):null;chrome.action.onClicked.addListener(async e=>{e.id&&await chrome.sidePanel.open({tabId:e.id})}),chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.set({userLibrary:{savedPrompts:[],customTags:{},lastUpdated:(new Date).toISOString()}}),s&&(s.startBackground(),s.onPaid.addListener(e=>{console.log("User paid via ExtPay:",e),chrome.runtime.sendMessage({type:"PAYMENT_STATUS_CHANGED",user:e})})),a.onPaid(e=>{console.log("User paid:",e),chrome.runtime.sendMessage({type:"PAYMENT_STATUS_CHANGED",user:e})})}),chrome.runtime.onMessage.addListener((e,t,r)=>"GET_USER_LIBRARY"===e.type?(chrome.storage.local.get(["userLibrary"],e=>{r(e.userLibrary)}),!0):"UPDATE_USER_LIBRARY"===e.type?(chrome.storage.local.set({userLibrary:e.data},()=>{r({success:!0})}),!0):"IMPROVE_PROMPT"===e.type?((async()=>{try{const t=o.getInstance(),i=await t.modifyPrompt({prompt:e.prompt,instruction:"enhance this prompt with more specific details while maintaining the original style and vision"});r({success:!0,improvedPrompt:i})}catch(e){r({success:!1,error:e instanceof Error?e.message:"Failed to improve prompt"})}})(),!0):"CHANGE_PROMPT"===e.type&&((async()=>{try{const t=o.getInstance(),i=await t.modifyPrompt({prompt:e.prompt,instruction:e.instructions});r({success:!0,changedPrompt:i})}catch(e){r({success:!1,error:e instanceof Error?e.message:"Failed to change prompt"})}})(),!0))})();