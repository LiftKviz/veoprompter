(()=>{"use strict";class e{constructor(){this.apiKey=null,this.knowledgeBase=null,this.secureStorage=null,"undefined"!=typeof SecureStorage&&(this.secureStorage=new SecureStorage)}static getInstance(){return e.instance||(e.instance=new e),e.instance}async loadKnowledgeBase(){if(this.knowledgeBase)return this.knowledgeBase;try{const e="undefined"!=typeof chrome&&chrome.runtime?chrome.runtime.getURL("data/knowledge-base.json"):"/data/knowledge-base.json",t=await fetch(e);return this.knowledgeBase=await t.json(),this.knowledgeBase}catch(e){return console.error("Failed to load knowledge base:",e),null}}generateSystemPrompt(e){return'You are an expert Veo 3 video prompt generator. Your task is to create detailed, effective prompts for Google\'s Veo 3 video generation model based on user descriptions or ideas.\n\nIMPORTANT: Always output your response as valid JSON with the following structure:\n{\n  "prompt": "the complete Veo 3 prompt",\n  "visual_elements": {\n    "subject": "description of who/what is in the scene",\n    "context": "where the scene takes place",\n    "action": "what is happening",\n    "style": "visual aesthetic (e.g., cinematic, animated, stop-motion)",\n    "camera_motion": "how the camera moves",\n    "composition": "how the shot is framed",\n    "ambiance": "mood and lighting"\n  },\n  "audio_elements": {\n    "dialogue": "what characters say (if any)",\n    "ambient_sound": "background noise",\n    "sound_effects": "specific sounds",\n    "music": "musical elements (if any)"\n  },\n  "technical_notes": {\n    "subtitles": "whether to include \'(no subtitles)\' directive",\n    "pronunciation_hints": "phonetic spellings if needed",\n    "character_consistency": "detailed character descriptions for consistency"\n  }\n}\n\nPROMPT CONSTRUCTION GUIDELINES:\n1. VISUAL ELEMENTS - Include all relevant details:\n   - Subject: Be specific about appearance, clothing, age, expressions\n   - Context: Describe the location in detail (indoor/outdoor, specific place)\n   - Action: Clear description of movement and behavior\n   - Style: Choose appropriate visual style (default is professional live-action)\n   - Camera motion: Use cinematography terms (dolly, zoom, pan, tracking, aerial, eye-level, etc.)\n   - Composition: Specify framing (wide shot, close-up, medium shot)\n   - Ambiance: Describe lighting, mood, color tones\n\n2. AUDIO ELEMENTS - Be explicit about all sounds:\n   - Dialogue: Use format "Character says: [exact words]" or describe what they talk about\n   - Keep dialogue under 8 seconds worth of speech\n   - Ambient sound: Specify background noise appropriate to the scene\n   - Sound effects: List any specific sounds needed\n   - Music: Describe genre, mood, and style if music is needed\n\n3. SPECIAL CONSIDERATIONS:\n   - For dialogue, use colon format: "Person says: words" (not quotes)\n   - Add "(no subtitles)" to prevent unwanted text overlays\n   - Use phonetic spelling for proper names or unusual pronunciations\n   - For selfie-style videos, start with "A selfie video of..." and mention visible arm\n   - For character consistency across scenes, repeat exact character descriptions\n   - Specify who speaks in multi-character scenes to avoid confusion\n\n4. PROMPT LENGTH:\n   - Create detailed prompts (100-200 words typically)\n   - More detail = better control over output\n   - Include negative instructions when needed (e.g., "no subtitles", "no laugh track")\n\n5. STYLE VARIATIONS:\n   - Default: Professional live-action video\n   - Available styles: animated, stop-motion, claymation, hand-drawn, watercolor, cinematic, documentary, found footage, etc.\n   - Style affects both visuals and character movement\n\nRemember:\n- Veo 3 produces consistent outputs for identical prompts\n- Change prompts significantly for variety\n- Be specific about what you want to avoid hallucinations\n- Layer multiple elements for rich, compelling videos'}async setApiKey(e){if(!e)return this.secureStorage?await this.secureStorage.removeApiKey():await chrome.storage.local.remove(["gptApiKey"]),void(this.apiKey=null);try{this.secureStorage?(await this.secureStorage.storeApiKey(e),this.apiKey=e):(this.apiKey=e,await chrome.storage.local.set({gptApiKey:e}))}catch(e){throw console.error("Failed to store API key:",e),e}}async getApiKey(){if(this.apiKey)return this.apiKey;try{if(this.secureStorage)return await this.secureStorage.migrateOldKey(),this.apiKey=await this.secureStorage.getApiKey(),this.apiKey;{const e=await chrome.storage.local.get(["gptApiKey"]);return this.apiKey=e.gptApiKey||null,this.apiKey}}catch(e){return console.error("Failed to retrieve API key:",e),this.apiKey=null,null}}async modifyPrompt(e){if(!e.instruction?.trim())throw new Error("📝 Modification instruction required: Please describe how you want to modify the prompt.");const t=await this.loadKnowledgeBase(),o=this.generateSystemPrompt(t);try{let t=await fetch("https://veo-prompt-assistant.netlify.app/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:o,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})});if(!t.ok)try{t=await fetch("http://localhost:8888/.netlify/functions/gpt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4o",systemPrompt:o,prompt:e.prompt,instruction:e.instruction,temperature:.7,maxTokens:800})})}catch(e){}if(!t.ok){const e=await t.json().catch(()=>({})),o=e.error?.message||e.message;if(console.error("GPT API Response Error:",{status:t.status,statusText:t.statusText,errorData:e,url:t.url}),401===t.status)throw new Error("🔐 Unauthorized: Backend API key invalid or missing.");if(403===t.status)throw new Error("🚫 Access denied by backend.");if(429===t.status)throw new Error("⏰ Rate limit exceeded. Please try again later.");if(t.status>=500)throw new Error("🔧 Server error: Please try again shortly.");if(400===t.status)throw new Error(`📝 Bad request: ${o||"Invalid prompt or instruction format."}`);if(404===t.status)throw new Error("🔧 Service unavailable: The AI modification service is not currently deployed. Please contact support.");throw new Error(`❌ Request failed (${t.status}): ${o||t.statusText||"Please try again."}`)}const n=await t.json();if(!n?.content)throw new Error("📭 Empty response: The AI didn't generate a response. Please try again with a different instruction.");try{const e=JSON.parse(n.content);if(e.prompt)return String(e.prompt).trim()}catch(e){}return String(n.content).trim()}catch(e){if(console.error("GPT API error:",e),e instanceof TypeError&&e.message.includes("fetch"))throw new Error("🌐 Connection failed: Please check your internet connection and try again.");throw e}}}const t="undefined"!=typeof ExtPay?ExtPay("veo-3-prompter"):null;chrome.action.onClicked.addListener(async e=>{e.id&&await chrome.sidePanel.open({tabId:e.id})}),chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.set({userLibrary:{savedPrompts:[],customTags:{},lastUpdated:(new Date).toISOString()}}),t&&(t.startBackground(),t.onPaid.addListener(e=>{console.log("User paid via ExtPay:",e),chrome.runtime.sendMessage({type:"PAYMENT_STATUS_CHANGED",user:e})})),console.log("Extension installed and ExtPay background service started")}),chrome.runtime.onMessage.addListener((o,n,r)=>"GET_USER_LIBRARY"===o.type?(chrome.storage.local.get(["userLibrary"],e=>{r(e.userLibrary)}),!0):"GET_PAYMENT_STATUS"===o.type?(t?t.getUser().then(e=>{r({paid:e.paid||!1,paidAt:e.paidAt?new Date(e.paidAt):void 0,installedAt:new Date(e.installedAt),trialStartedAt:e.trialStartedAt?new Date(e.trialStartedAt):void 0,email:e.email,subscriptionStatus:e.subscriptionStatus})}).catch(e=>{console.error("Error getting payment status:",e),r({paid:!1,installedAt:new Date})}):r({paid:!1,installedAt:new Date}),!0):"UPDATE_USER_LIBRARY"===o.type?(chrome.storage.local.set({userLibrary:o.data},()=>{r({success:!0})}),!0):"IMPROVE_PROMPT"===o.type?((async()=>{try{const t=e.getInstance(),n=await t.modifyPrompt({prompt:o.prompt,instruction:"enhance this prompt with more specific details while maintaining the original style and vision"});r({success:!0,improvedPrompt:n})}catch(e){r({success:!1,error:e instanceof Error?e.message:"Failed to improve prompt"})}})(),!0):"CHANGE_PROMPT"===o.type&&((async()=>{try{const t=e.getInstance(),n=await t.modifyPrompt({prompt:o.prompt,instruction:o.instructions});r({success:!0,changedPrompt:n})}catch(e){r({success:!1,error:e instanceof Error?e.message:"Failed to change prompt"})}})(),!0))})();