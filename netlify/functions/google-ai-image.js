// Netlify Function: Google AI Image Generation proxy
// Calls Google Generative AI API for image generation with server-side API key

const { GoogleGenerativeAI } = require('@google/generative-ai');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'Content-Type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

exports.handler = async (event) => {
  console.log('Google AI Image function called with:', {
    path: event.path,
    httpMethod: event.httpMethod
  });

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 204,
      headers: corsHeaders,
      body: ''
    };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: corsHeaders,
      body: JSON.stringify({ error: { message: 'Method not allowed' } })
    };
  }

  const apiKey = process.env.GOOGLE_AI_API_KEY;
  if (!apiKey) {
    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({ error: { message: 'Server misconfiguration: GOOGLE_AI_API_KEY missing' } })
    };
  }

  let body;
  try {
    body = JSON.parse(event.body || '{}');
  } catch (e) {
    return {
      statusCode: 400,
      headers: corsHeaders,
      body: JSON.stringify({ error: { message: 'Invalid JSON body' } })
    };
  }

  try {
    const { prompt, userId } = body;

    if (!prompt || typeof prompt !== 'string') {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({ error: { message: 'prompt is required and must be a string' } })
      };
    }

    if (!userId || typeof userId !== 'string') {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({ error: { message: 'userId is required for rate limiting' } })
      };
    }

    // Rate limiting is handled on the frontend in imageGenerationService.ts
    // to avoid duplicate API calls and provide immediate feedback

    // Initialize Google AI
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // Get the Gemini model for image generation
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-image-preview" });

    console.log('Generating image for prompt:', prompt.substring(0, 100) + '...');

    // Enhanced prompt for first frame generation
    const enhancedPrompt = `Create a cinematic first frame preview image that captures the essence of this video prompt: ${prompt}. Focus on the main subject, scene, and visual style described. Make it visually striking and representative of what the opening frame of this video would look like.`;

    // Generate image using Gemini
    const result = await model.generateContent([enhancedPrompt]);
    const response = await result.response;
    
    console.log('Google AI response received');
    
    // Get the generated image data
    const candidates = response.candidates;
    if (!candidates || candidates.length === 0) {
      return {
        statusCode: 500,
        headers: corsHeaders,
        body: JSON.stringify({ error: { message: 'No image generated by Google AI' } })
      };
    }

    // For Gemini image generation, the response structure includes parts with inline data
    const candidate = candidates[0];
    if (!candidate.content || !candidate.content.parts) {
      return {
        statusCode: 500,
        headers: corsHeaders,
        body: JSON.stringify({ error: { message: 'Invalid response structure from Google AI' } })
      };
    }

    // Find the image part in the response
    const imagePart = candidate.content.parts.find(part => part.inlineData && part.inlineData.mimeType && part.inlineData.mimeType.startsWith('image/'));
    
    if (!imagePart || !imagePart.inlineData || !imagePart.inlineData.data) {
      return {
        statusCode: 500,
        headers: corsHeaders,
        body: JSON.stringify({ error: { message: 'No image data found in response' } })
      };
    }

    // Convert base64 image to data URL
    const imageData = imagePart.inlineData.data;
    const mimeType = imagePart.inlineData.mimeType;
    const dataUrl = `data:${mimeType};base64,${imageData}`;

    console.log(`Image generated successfully, size: ${imageData.length} bytes, type: ${mimeType}`);

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
      body: JSON.stringify({ 
        success: true,
        imageUrl: dataUrl,
        prompt: prompt,
        mimeType: mimeType
      })
    };

  } catch (err) {
    console.error('Google AI Image generation error:', err);
    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({ error: { message: err.message || 'Image generation failed' } })
    };
  }
};