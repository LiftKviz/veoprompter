V#!/usr/bin/env node
/**
 * Veo 2 Video Generator
 * Generated by Veo 3 Prompt Assistant Chrome Extension
 * 
 * Prerequisites:
 * npm install @google/genai
 */

import { GoogleGenAI } from "@google/genai";
import fs from 'fs';
import https from 'https';
import readline from 'readline';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function downloadFile(url, destPath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(destPath);
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(destPath, () => {});
      reject(err);
    });
  });
}

async function generateVideo() {
  console.log("üé¨ Veo 2 Video Generator");
  console.log("=" * 50);
  
  // Get API key
  let apiKey = process.env.GOOGLE_GENAI_API_KEY;
  if (!apiKey) {
    apiKey = await question("Enter your Google GenAI API key: ");
  }
  
  // Get prompt
  const prompt = await question("\nEnter your video prompt (or press Enter for default): ") || 
    "8-second cinematic product launch teaser. Close-up shot of sleek tech product on minimalist white surface with dramatic side lighting.";
  
  console.log("\nüöÄ Starting video generation...");
  console.log(`Prompt: ${prompt.substring(0, 100)}...`);
  
  try {
    const ai = new GoogleGenAI({ apiKey });
    
    let operation = await ai.models.generateVideos({
      model: "veo-2.0-generate-001",
      prompt: prompt,
    });
    
    console.log(`Operation started: ${operation.name}`);
    
    // Poll the operation status until done
    // Check every 10 seconds as recommended
    let pollCount = 0;
    const maxPolls = 120; // 20 minutes max
    
    while (!operation.done && pollCount < maxPolls) {
      console.log(`‚è≥ Waiting for video generation... (${pollCount * 10} seconds elapsed)`);
      await new Promise(resolve => setTimeout(resolve, 10000)); // 10 seconds
      
      // Refresh the operation object to get latest status
      operation = await ai.operations.getVideosOperation({
        operation: operation,
      });
      
      pollCount++;
    }
    
    if (operation.done && operation.response?.generatedVideos?.length > 0) {
      console.log("‚úÖ Video generation complete!");
      
      // Download the video
      const video = operation.response.generatedVideos[0].video;
      const filename = `veo2_${Date.now()}.mp4`;
      
      console.log(`üì• Downloading video as ${filename}...`);
      
      // If the SDK provides a download method
      if (ai.files && ai.files.download) {
        await ai.files.download({
          file: video,
          downloadPath: filename,
        });
      } else if (video.uri) {
        // Fallback to manual download
        await downloadFile(video.uri, filename);
      }
      
      console.log(`\nüéâ Success! Video saved as ${filename}`);
    } else {
      throw new Error("Video generation failed or timed out");
    }
    
  } catch (error) {
    console.error(`\n‚ùå Error: ${error.message}`);
    console.log("\nTroubleshooting tips:");
    console.log("1. Verify your API key is correct");
    console.log("2. Ensure Veo 2 is available in your region");
    console.log("3. Check your internet connection");
    console.log("4. Try a simpler prompt");
  }
  
  rl.close();
}

// Run the generator
generateVideo().catch(console.error);